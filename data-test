<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
package dataStructure;

import java.io.IOException;
import java.util.BitSet;

public class Data {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
//		Vector<Integer> v = new Vector<Integer>(3,2);

//		System.out.println("Initial size: " + v.size());

//		System.out.println("Initial capacity: "+ v.capacity());

//		v.addElement(new Integer(1));

//		v.addElement(new Integer(2));

//		v.addElement(new Integer(3));

//		v.addElement(new Integer(4));

//		System.out.println("Capacity after four additions: "+ v.capacity());
		
//		Stack<Integer> st = new Stack<Integer>();

//		st.push(1);

//		st.push(2);

//		st.push(3);

//		System.out.println(st.search(2));

//		System.out.println(st.pop());

//		System.out.println(st.pop());

//		System.out.println(st.pop());
		
//		Hashtable<String, Double> score = new Hashtable<String, Double>();

//		score.put("Zara", new Double(91.4));

//		score.put("Mary", new Double(95));

//		score.put("Ayan", new Double(78.2));

//		System.out.println(score.get("Mary"));
		
//		Properties defaultProps = new Properties();

//		FileInputStream in = new FileInputStream("abc.txt");

//		defaultProps.load(in);

//		in.close();
//		
//		for (Object key : defaultProps.keySet()) {

//			System.out.println(key + ": " + defaultProps.get(key));

//			defaultProps.setProperty((String)key, "new value");

//		}
//		
//		defaultProps.put("newprop", String.valueOf(10));

//		FileOutputStream out = new FileOutputStream("appProperties.txt");

//		defaultProps.store(out, "---No Comment---");

//		out.close();
		
		BitSet bits = new BitSet(8);
		for(int i = 0; i < 8; i++){
			if((i%2 == 0)){
				bits.set(i);
			}
		}
		System.out.println("initial pattern in bits: ");
		System.out.println(bits);
	}
}

<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>package dataStructure;</p>

<p>import java.io.IOException;
import java.util.BitSet;</p>

<p>public class Data {</p>

<pre><code>public static void main(String[] args) throws IOException {
    // TODO Auto-generated method stub
</code></pre>

<p>//        Vector<integer> v = new Vector<integer>(3,2);</integer></integer></p>

<p>//        System.out.println("Initial size: " + v.size());</p>

<p>//        System.out.println("Initial capacity: "+ v.capacity());</p>

<p>//        v.addElement(new Integer(1));</p>

<p>//        v.addElement(new Integer(2));</p>

<p>//        v.addElement(new Integer(3));</p>

<p>//        v.addElement(new Integer(4));</p>

<p>//        System.out.println("Capacity after four additions: "+ v.capacity());</p>

<p>//        Stack<integer> st = new Stack<integer>();</integer></integer></p>

<p>//        st.push(1);</p>

<p>//        st.push(2);</p>

<p>//        st.push(3);</p>

<p>//        System.out.println(st.search(2));</p>

<p>//        System.out.println(st.pop());</p>

<p>//        System.out.println(st.pop());</p>

<p>//        System.out.println(st.pop());</p>

<p>//        Hashtable<string, double=""> score = new Hashtable<string, double="">();</string,></string,></p>

<p>//        score.put("Zara", new Double(91.4));</p>

<p>//        score.put("Mary", new Double(95));</p>

<p>//        score.put("Ayan", new Double(78.2));</p>

<p>//        System.out.println(score.get("Mary"));</p>

<p>//        Properties defaultProps = new Properties();</p>

<p>//        FileInputStream in = new FileInputStream("abc.txt");</p>

<p>//        defaultProps.load(in);</p>

<p>//        in.close();
// <br>
//        for (Object key : defaultProps.keySet()) {</p>

<p>//            System.out.println(key + ": " + defaultProps.get(key));</p>

<p>//            defaultProps.setProperty((String)key, "new value");</p>

<p>//        }
// <br>
//        defaultProps.put("newprop", String.valueOf(10));</p>

<p>//        FileOutputStream out = new FileOutputStream("appProperties.txt");</p>

<p>//        defaultProps.store(out, "---No Comment---");</p>

<p>//        out.close();</p>

<pre><code>    BitSet bits = new BitSet(8);
    for(int i = 0; i &lt; 8; i++){
        if((i%2 == 0)){
            bits.set(i);
        }
    }
    System.out.println("initial pattern in bits: ");
    System.out.println(bits);
}
</code></pre>

<p>}</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>Â© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "data-test";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
